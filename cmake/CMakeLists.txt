cmake_minimum_required(VERSION 2.8)

# Cannonball version
set(VERSION_MAJOR 1)
set(VERSION_MINOR 08)

if(BUILD_PSP2)
  set(CMAKE_SYSTEM_NAME "Generic")
  if(NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    if(DEFINED ENV{VITASDK})
      set(CMAKE_TOOLCHAIN_FILE "$ENV{VITASDK}/share/vita.toolchain.cmake" CACHE PATH "toolchain file")
    else()
      message(FATAL_ERROR "Please define VITASDK to point to your SDK path!")
    endif()
  endif()

  set(TARGET vita)
endif(BUILD_PSP2)

if (BUILD_NX)
    set(CMAKE_SYSTEM_NAME "Generic")
    set(DEVKITPRO $ENV{DEVKITPRO})
    set(CMAKE_SYSTEM_PROCESSOR "armv8-a")
    set(CMAKE_C_COMPILER "${DEVKITPRO}/devkitA64/bin/aarch64-none-elf-gcc")
    set(CMAKE_CXX_COMPILER "${DEVKITPRO}/devkitA64/bin/aarch64-none-elf-g++")
    set(CMAKE_ASM_COMPILER "${DEVKITPRO}/devkitA64/bin/aarch64-none-elf-as")
    set(CMAKE_AR "${DEVKITPRO}/devkitA64/bin/aarch64-none-elf-gcc-ar" CACHE STRING "")
    set(CMAKE_RANLIB "${DEVKITPRO}/devkitA64/bin/aarch64-none-elf-gcc-ranlib" CACHE STRING "")
    set(CMAKE_C_FLAGS "-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE -I${DEVKITPRO}/libnx/include -I${DEVKITPRO}/portlibs/switch/include" CACHE STRING "C flags")
    #-ffast-math -ffunction-sections -fdata-sections
    set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -fpermissive" CACHE STRING "C++ flags")
    #-fno-rtti -fno-exceptions -std=gnu++11
    set(CMAKE_FIND_ROOT_PATH ${DEVKITPRO} ${DEVKITPRO}/devkitA64 ${DEVKITPRO}/libnx ${DEVKITPRO}/portlibs/switch)
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    set(BUILD_SHARED_LIBS OFF CACHE INTERNAL "Shared libs not available")
    link_directories(${DEVKITPRO}/libnx/lib ${DEVKITPRO}/portlibs/switch/lib)

    set(TARGET switch)
endif (BUILD_NX)

project (Cannonball)

set(DCMAKE default.cmake)
set(CMDIR ../cmake)

# Uncomment for debug output
#set(Boost_DEBUG 1)

# Source location
set(main_cpp_base ../src/main)

# Include relevant CMAKE file (default, mingw, pandora etc.)
if(TARGET)
    set(TCMAKE ${TARGET}.cmake)
    if(EXISTS ${CMDIR}/${TCMAKE})
        include(${TCMAKE})
    else()
        message("CMake files for ${TARGET} not found, using ${DCMAKE}")
        include(${DCMAKE})
    endif()
else()
    message("TARGET not passed, using ${DCMAKE}")
    include(${DCMAKE})
endif(TARGET)

set(BOOST_INCLUDEDIR ${lib_base}/boost)
#find_package(Boost REQUIRED)

# Include
include_directories(
    "${main_cpp_base}"
    "${BOOST_INCLUDEDIR}"
)

# Create compile time setup
file(WRITE ${main_cpp_base}/setup.hpp 
"// This file is AUTO GENERATED by CMake.
#pragma once
#include \"SDL_video.h\"
const static char* FILENAME_CONFIG = \"${xml_directory}config.xml\";
const static char* FILENAME_SCORES = \"${xml_directory}hiscores\";
const static char* FILENAME_TTRIAL = \"${xml_directory}hiscores_timetrial\";
const static char* FILENAME_CONT   = \"${xml_directory}hiscores_continuous\";
const static int SDL_FLAGS = ${sdl_flags};
    "
    )
    
set(src_main
    "${main_cpp_base}/globals.hpp"
    "${main_cpp_base}/romloader.hpp"
    "${main_cpp_base}/roms.hpp"
    "${main_cpp_base}/trackloader.hpp"
    "${main_cpp_base}/setup.hpp"
    "${main_cpp_base}/stdint.hpp"
    "${main_cpp_base}/main.hpp"
    "${main_cpp_base}/video.hpp"
    "${main_cpp_base}/utils.hpp"

    "${main_cpp_base}/main.cpp"
    "${main_cpp_base}/romloader.cpp"
    "${main_cpp_base}/trackloader.cpp"
    "${main_cpp_base}/roms.cpp"
    "${main_cpp_base}/video.cpp"
    "${main_cpp_base}/utils.cpp"
    )

set(src_frontend
    "${main_cpp_base}/frontend/cabdiag.hpp"
    "${main_cpp_base}/frontend/config.hpp"
    "${main_cpp_base}/frontend/menu.hpp"
    "${main_cpp_base}/frontend/ttrial.hpp"

    "${main_cpp_base}/frontend/cabdiag.cpp"
    "${main_cpp_base}/frontend/config.cpp"
    "${main_cpp_base}/frontend/menu.cpp"
    "${main_cpp_base}/frontend/ttrial.cpp"
    )

set(src_hwvideo
    "${main_cpp_base}/hwvideo/hwroad.hpp"
    "${main_cpp_base}/hwvideo/hwsprites.hpp"
    "${main_cpp_base}/hwvideo/hwtiles.hpp"

    "${main_cpp_base}/hwvideo/hwroad.cpp"
    "${main_cpp_base}/hwvideo/hwsprites.cpp"
    "${main_cpp_base}/hwvideo/hwtiles.cpp"
    )
    
set(src_hwaudio
    "${main_cpp_base}/hwaudio/segapcm.hpp"
    "${main_cpp_base}/hwaudio/soundchip.hpp"
    "${main_cpp_base}/hwaudio/ym2151.hpp"
    
    "${main_cpp_base}/hwaudio/segapcm.cpp"
    "${main_cpp_base}/hwaudio/soundchip.cpp"
    "${main_cpp_base}/hwaudio/ym2151.cpp"
    )
   
if(SDL2)
	if(OPENGL)
	    set(src_sdl
		"${main_cpp_base}/sdl2/audio.hpp"
		"${main_cpp_base}/sdl2/timer.hpp"
		"${main_cpp_base}/sdl2/input.hpp"
		"${main_cpp_base}/sdl2/renderbase.hpp"
		"${main_cpp_base}/sdl2/rendergl.hpp"

		"${main_cpp_base}/sdl2/audio.cpp"
		"${main_cpp_base}/sdl2/timer.cpp"
		"${main_cpp_base}/sdl2/input.cpp"
		"${main_cpp_base}/sdl2/renderbase.cpp"
		"${main_cpp_base}/sdl2/rendergl.cpp"
		)
	elseif(OPENGLES)
	    set(src_sdl
		"${main_cpp_base}/sdl2/audio.hpp"
		"${main_cpp_base}/sdl2/timer.hpp"
		"${main_cpp_base}/sdl2/input.hpp"
		"${main_cpp_base}/sdl2/renderbase.hpp"
		"${main_cpp_base}/sdl2/rendergles.hpp"

		"${main_cpp_base}/sdl2/audio.cpp"
		"${main_cpp_base}/sdl2/timer.cpp"
		"${main_cpp_base}/sdl2/input.cpp"
		"${main_cpp_base}/sdl2/renderbase.cpp"
		"${main_cpp_base}/sdl2/rendergles.cpp"
		)   
	else()
	    set(src_sdl
		"${main_cpp_base}/sdl2/audio.hpp"
		"${main_cpp_base}/sdl2/timer.hpp"
		"${main_cpp_base}/sdl2/input.hpp"
		"${main_cpp_base}/sdl2/renderbase.hpp"
		"${main_cpp_base}/sdl2/rendersurface.hpp"

		"${main_cpp_base}/sdl2/audio.cpp"
		"${main_cpp_base}/sdl2/timer.cpp"
		"${main_cpp_base}/sdl2/input.cpp"
		"${main_cpp_base}/sdl2/renderbase.cpp"
		"${main_cpp_base}/sdl2/rendersurface.cpp"
		)
	endif()
else()  #Using legacy, unmantained SDL1.x
	if(OPENGL)
	    set(src_sdl
		"${main_cpp_base}/sdl/audio.hpp"
		"${main_cpp_base}/sdl/timer.hpp"
		"${main_cpp_base}/sdl/input.hpp"
		"${main_cpp_base}/sdl/renderbase.hpp"
		"${main_cpp_base}/sdl/rendergl.hpp"

		"${main_cpp_base}/sdl/audio.cpp"
		"${main_cpp_base}/sdl/timer.cpp"
		"${main_cpp_base}/sdl/input.cpp"
		"${main_cpp_base}/sdl/renderbase.cpp"
		"${main_cpp_base}/sdl/rendergl.cpp"
		)   
	else()
	    set(src_sdl
		"${main_cpp_base}/sdl/audio.hpp"
		"${main_cpp_base}/sdl/timer.hpp"
		"${main_cpp_base}/sdl/input.hpp"
		"${main_cpp_base}/sdl/renderbase.hpp"
		"${main_cpp_base}/sdl/rendersw.hpp"

		"${main_cpp_base}/sdl/audio.cpp"
		"${main_cpp_base}/sdl/timer.cpp"
		"${main_cpp_base}/sdl/input.cpp"
		"${main_cpp_base}/sdl/renderbase.cpp"
		"${main_cpp_base}/sdl/rendersw.cpp"
		)
	endif()
endif()

set(src_directx
    "${main_cpp_base}/directx/ffeedback.hpp"
    "${main_cpp_base}/directx/ffeedback.cpp"
)

set(src_cannonboard
    "${main_cpp_base}/cannonboard/asyncserial.hpp"
    "${main_cpp_base}/cannonboard/interface.hpp"
    "${main_cpp_base}/cannonboard/asyncserial.cpp"
    "${main_cpp_base}/cannonboard/interface.cpp"
)

set(src_engine
    "${main_cpp_base}/engine/oaddresses.hpp"
    "${main_cpp_base}/engine/oanimseq.hpp"
    "${main_cpp_base}/engine/oanimsprite.hpp"
    "${main_cpp_base}/engine/oattractai.hpp"
    "${main_cpp_base}/engine/obonus.hpp"
    "${main_cpp_base}/engine/ocrash.hpp"
    "${main_cpp_base}/engine/oentry.hpp"
    "${main_cpp_base}/engine/oferrari.hpp"
    "${main_cpp_base}/engine/ohiscore.hpp"
    "${main_cpp_base}/engine/ohud.hpp"
    "${main_cpp_base}/engine/oinitengine.hpp"
    "${main_cpp_base}/engine/oinputs.hpp"
    "${main_cpp_base}/engine/olevelobjs.hpp"
    "${main_cpp_base}/engine/ologo.hpp"
    "${main_cpp_base}/engine/omap.hpp"
    "${main_cpp_base}/engine/omusic.hpp"
    "${main_cpp_base}/engine/ooutputs.hpp"
    "${main_cpp_base}/engine/opalette.hpp"
    "${main_cpp_base}/engine/oroad.hpp"
    "${main_cpp_base}/engine/osmoke.hpp"
    "${main_cpp_base}/engine/osprite.hpp"
    "${main_cpp_base}/engine/osprites.hpp"
    "${main_cpp_base}/engine/ostats.hpp"
    "${main_cpp_base}/engine/otiles.hpp"
    "${main_cpp_base}/engine/otraffic.hpp"
    "${main_cpp_base}/engine/outils.hpp"
    "${main_cpp_base}/engine/outrun.hpp"
    "${main_cpp_base}/engine/ozoom_lookup.hpp"

    "${main_cpp_base}/engine/oanimseq.cpp"
    "${main_cpp_base}/engine/oattractai.cpp"
    "${main_cpp_base}/engine/obonus.cpp"
    "${main_cpp_base}/engine/ocrash.cpp"
    "${main_cpp_base}/engine/oferrari.cpp"
    "${main_cpp_base}/engine/ohiscore.cpp"
    "${main_cpp_base}/engine/ohud.cpp"
    "${main_cpp_base}/engine/oinitengine.cpp"
    "${main_cpp_base}/engine/oinputs.cpp"
    "${main_cpp_base}/engine/olevelobjs.cpp"
    "${main_cpp_base}/engine/ologo.cpp"
    "${main_cpp_base}/engine/omap.cpp"
    "${main_cpp_base}/engine/omusic.cpp"
    "${main_cpp_base}/engine/ooutputs.cpp"
    "${main_cpp_base}/engine/opalette.cpp"
    "${main_cpp_base}/engine/oroad.cpp"
    "${main_cpp_base}/engine/osmoke.cpp"
    "${main_cpp_base}/engine/osprite.cpp"
    "${main_cpp_base}/engine/osprites.cpp"
    "${main_cpp_base}/engine/ostats.cpp"
    "${main_cpp_base}/engine/otiles.cpp"
    "${main_cpp_base}/engine/otraffic.cpp"
    "${main_cpp_base}/engine/outils.cpp"
    "${main_cpp_base}/engine/outrun.cpp"
    )

set(src_engine_audio
    "${main_cpp_base}/engine/audio/commands.hpp"
    "${main_cpp_base}/engine/audio/osound.hpp"
    "${main_cpp_base}/engine/audio/osoundint.hpp"
    "${main_cpp_base}/engine/audio/osoundadr.hpp"

    "${main_cpp_base}/engine/audio/osound.cpp"
    "${main_cpp_base}/engine/audio/osoundint.cpp"
    )

# Group files into relevant filters for Visual Studio build
SOURCE_GROUP(src FILES ${src_main})
SOURCE_GROUP(src\\frontend FILES ${src_frontend})
SOURCE_GROUP(src\\hwvideo FILES ${src_hwvideo})
SOURCE_GROUP(src\\hwaudio FILES ${src_hwaudio})
SOURCE_GROUP(src\\sdl FILES ${src_sdl})
SOURCE_GROUP(src\\directx FILES ${src_directx})
SOURCE_GROUP(src\\cannonboard FILES ${src_cannonboard})
SOURCE_GROUP(src\\engine FILES ${src_engine})
SOURCE_GROUP(src\\engine\\audio FILES ${src_engine_audio})

if(BUILD_PSP2)
    set(src_vita
        "${main_cpp_base}/psp2/psp2_shader.h"

        "${main_cpp_base}/psp2/psp2_shader.c"
        )
    set(SRCS
        ${src_main}
        ${src_frontend}
        ${src_hwvideo}
        ${src_hwaudio}
        ${src_sdl}
        ${src_directx}
        ${src_cannonboard}
        ${src_engine}
        ${src_engine_audio}
        ${src_vita}
    )
else()
    set(SRCS
        ${src_main}
        ${src_frontend}
        ${src_hwvideo}
        ${src_hwaudio}
        ${src_sdl}
        ${src_directx}
        ${src_cannonboard}
        ${src_engine}
        ${src_engine_audio}
    )
endif(BUILD_PSP2)

# Add Icon For Windows Builds
if(WIN32)
  set(SRCS ${SRCS} ../res/cannonball.rc)
endif(WIN32)

if(OPENGL)
    add_definitions(-DWITH_OPENGL)
endif()

if(OPENGLES)
    add_definitions(-DWITH_OPENGLES)
endif()

if(CANNONBOARD)
    add_definitions(-DCANNONBOARD)
endif()

add_executable(${PROJECT_NAME} ${SRCS})

target_compile_options(${PROJECT_NAME} PRIVATE ${FLAGS})

# Copy Configuration file to current build

if(SDL2)
configure_file(../res/config_sdl2.xml ./config.xml
    COPYONLY 
)
else()
configure_file(../res/config.xml ./config.xml
    COPYONLY 
)
endif()

# Copy Resource files
configure_file(../res/tilemap.bin ./res/tilemap.bin
    COPYONLY 
)
configure_file(../res/tilepatch.bin ./res/tilepatch.bin
    COPYONLY 
)

if(BUILD_PSP2)
configure_file(../res/config_vita.xml ./config.xml
    COPYONLY 
)
vita_create_self(${PROJECT_NAME}.self ${PROJECT_NAME} ${UNSAFE_FLAG})
add_custom_target(${PROJECT_NAME}.vpk
        DEPENDS ${PROJECT_NAME}.self
        COMMAND rm -rf vpk && mkdir -p vpk/sce_sys
        COMMAND ${VITASDK}/bin/vita-mksfoex -s TITLE_ID=${TITLEID} "${PROJECT_NAME}" vpk/sce_sys/param.sfo
        COMMAND cp ${PROJECT_NAME}.self vpk/eboot.bin
        COMMAND cp -r ${CMAKE_SOURCE_DIR}/../psp2data/* vpk
        COMMAND cp -r res vpk
        COMMAND cd vpk && zip -r ../Cannonball.vpk . && cd ..
        )
endif(BUILD_PSP2)

if(BUILD_NX)
configure_file(../res/config_switch.xml ./config.xml
    COPYONLY
)
add_executable(${PROJECT_NAME}.elf ${SRCS})
set_target_properties(${PROJECT_NAME}.elf PROPERTIES LINK_FLAGS "-specs=${DEVKITPRO}/libnx/switch.specs")
add_custom_target(${PROJECT_NAME}_Switch.nro
        DEPENDS ${PROJECT_NAME}.elf
        COMMAND ${DEVKITPRO}/tools/bin/nacptool --create "${PROJECT_NAME}_Switch" "rsn8887" "${VERSION_MAJOR}.${VERSION_MINOR}" Cannonball_Switch.nacp
        COMMAND ${DEVKITPRO}/tools/bin/elf2nro ${PROJECT_NAME}.elf ${PROJECT_NAME}_Switch.nro --icon=${CMAKE_SOURCE_DIR}/../switchdata/icon0.jpg --nacp=Cannonball_Switch.nacp
        )
add_custom_target(${PROJECT_NAME}_Switch.zip
        DEPENDS ${PROJECT_NAME}_Switch.nro
        COMMAND rm -rf ${CMAKE_BINARY_DIR}/release/Cannonball_Switch
        COMMAND mkdir -p ${CMAKE_BINARY_DIR}/release/Cannonball_Switch
        COMMAND mkdir -p ${CMAKE_BINARY_DIR}/release/Cannonball_Switch/roms
        COMMAND cp -f ${CMAKE_BINARY_DIR}/Cannonball_Switch.nro ${CMAKE_BINARY_DIR}/release/Cannonball_Switch/Cannonball_Switch.nro
        COMMAND cp -r ${CMAKE_BINARY_DIR}/config.xml ${CMAKE_BINARY_DIR}/release/Cannonball_Switch/config.xml
        COMMAND cp -r ${CMAKE_BINARY_DIR}/res ${CMAKE_BINARY_DIR}/release/Cannonball_Switch/res
        COMMAND cd ${CMAKE_BINARY_DIR}/release && zip -r ../${PROJECT_NAME}_${VERSION_MAJOR}.${VERSION_MINOR}_Switch.zip Cannonball_Switch && cd ${CMAKE_BINARY_DIR}
        )
endif(BUILD_NX)
